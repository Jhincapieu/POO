/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Principal;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.NumberFormatException;
/**
 *
 * @author hinca
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        numero = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(607, 300));

        jLabel1.setText("Nombre");

        jLabel2.setText("Número");

        nombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        numero.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton1.setText("Crear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Leer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Actualizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Borrar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Limpiar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(166, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numero)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            String data[] = {nombre.getText(), numero.getText()};

try {
    // Obtener el nombre del nuevo contacto
    String newName = data[0];

    // Obtener el número del nuevo contacto
    long newNumber = Long.parseLong(data[1]);

    String nameNumberString;
    String name;
    long number;
    int index;

    // Crear el archivo si no existe
    File file = new File("friendsContact.txt");

    if (!file.exists()) {
        file.createNewFile();
    }

    // Abrir el archivo en modo lectura/escritura
    RandomAccessFile raf = new RandomAccessFile(file, "rw");
    boolean found = false;

    // Verificar si el contacto ya existe
    while (raf.getFilePointer() < raf.length()) {
        // Leer línea por línea
        nameNumberString = raf.readLine();

        // Separar el nombre y el número
        String[] lineSplit = nameNumberString.split("!");

        // Obtener el nombre y el número de la línea
        name = lineSplit[0];
        number = Long.parseLong(lineSplit[1]);

        // Verificar si el nombre o número ya existen
        if (name.equals(newName) || number == newNumber) {
            found = true;
            break;
        }
    }

    // Actualizar el contacto si el registro existe
    if (found) {
        // Crear un archivo temporal
        File tmpFile = new File("temp.txt");

        // Abrir el archivo temporal en modo lectura/escritura
        RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

        // Volver al inicio del archivo original
        raf.seek(0);

        // Recorrer el archivo original
        while (raf.getFilePointer() < raf.length()) {
            // Leer el contacto del archivo
            nameNumberString = raf.readLine();
            index = nameNumberString.indexOf('!');
            name = nameNumberString.substring(0, index);

            // Actualizar el contacto si es el que se busca
            if (name.equals(newName)) {
                nameNumberString = name + "!" + newNumber;
            }

            // Escribir el contacto en el archivo temporal
            tmpraf.writeBytes(nameNumberString);

            // Solo escribir el salto de línea si no es la última línea
            if (raf.getFilePointer() < raf.length()) {
                tmpraf.writeBytes(System.lineSeparator());
            }
        }

        // Copiar el contenido actualizado al archivo original
        raf.seek(0);
        tmpraf.seek(0);

        while (tmpraf.getFilePointer() < tmpraf.length()) {
            String line = tmpraf.readLine();
            raf.writeBytes(line);

            // Solo añadir un salto de línea si no es la última línea
            if (tmpraf.getFilePointer() < tmpraf.length()) {
                raf.writeBytes(System.lineSeparator());
            }
        }

        // Ajustar la longitud del archivo original al del temporal
        raf.setLength(tmpraf.length());

        // Cerrar los archivos
        tmpraf.close();
        raf.close();

        // Eliminar el archivo temporal
        tmpFile.delete();

        System.out.println("Amigo actualizado.");
    } else {
        raf.close();
        System.out.println("El nombre o número no existen.");
    }
} catch (IOException ioe) {
    System.out.println("Error de IO: " + ioe.getMessage());
} catch (NumberFormatException nef) {
    System.out.println("Número inválido: " + nef.getMessage());
}

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Obtener los datos del contacto
String data[] = {nombre.getText(), numero.getText()};

try {
    // Obtener el nombre del nuevo contacto
    String newName = data[0];

    // Obtener el número del nuevo contacto
    long newNumber = Long.parseLong(data[1]);

    String nameNumberString;
    String name;
    long number;

    // Usar un puntero de archivo para crear o abrir el archivo
    File file = new File("friendsContact.txt");
    System.out.println("Archivo guardado en: " + file.getAbsolutePath());

    // Crear el archivo si no existe
    if (!file.exists()) {
        file.createNewFile();
    }

    // Abrir el archivo en modo lectura/escritura
    RandomAccessFile raf = new RandomAccessFile(file, "rw");
    boolean found = false;

    // Verificar si el contacto ya existe
    while (raf.getFilePointer() < raf.length()) {
        // Leer línea por línea
        nameNumberString = raf.readLine();

        // Dividir la cadena para obtener nombre y número
        String[] lineSplit = nameNumberString.split("!");

        // Separar el nombre y el número
        name = lineSplit[0];
        number = Long.parseLong(lineSplit[1]);

        // Comparar el nombre usando equals() y el número con ==
        if (name.equals(newName) || number == newNumber) {
            found = true;
            break;
        }
    }

    if (!found) {
        // Si no se encontró el contacto, agregarlo al archivo
        nameNumberString = newName + "!" + String.valueOf(newNumber);

        // Mover el puntero al final del archivo
        raf.seek(raf.length());

        // Escribir el nuevo contacto en una nueva línea
        raf.writeBytes(nameNumberString);
        raf.writeBytes(System.lineSeparator());

        // Mensaje de éxito
        System.out.println("Amigo agregado.");
    } else {
        // Si se encontró el contacto
        System.out.println("El nombre o número ya existen.");
    }

    // Cerrar el archivo
    raf.close();
} catch (IOException ioe) {
    System.out.println("Error de IO: " + ioe.getMessage());
} catch (NumberFormatException nef) {
    System.out.println("Formato de número inválido. Verifica que el número esté bien.");
}


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
      //  class DisplayFriends {
 
    //public static void main(String data[])
    //{
 
        try {
 
            String nameNumberString;
            String name;
            long number;
            int index;
 
            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");
 
            if (!file.exists()) {
 
                // Create a new file if not exists.
                file.createNewFile();
            }
 
            // Opening file in reading and write mode.
 
            RandomAccessFile raf
                = new RandomAccessFile(file, "rw");
            boolean found = false;
 
            // Traversing the file
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {
 
                // reading line from the file.
                nameNumberString = raf.readLine();
 
                // splitting the string to get name and
                // number
                String[] lineSplit
                    = nameNumberString.split("!");
 
                // separating name and number.
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);
 
                // Print the contact data
                System.out.println(
                    "Friend Name: " + name + "\n"
                    + "Contact Number: " + number + "\n");
            }
        }
 
            catch (IOException ioe)
            {
 
                System.out.println(ioe);
            }
            catch (NumberFormatException nef)
            {
 
                System.out.println(nef);
            }
        
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        String data[] = {nombre.getText(), numero.getText()};

try {
    // Obtener el nombre del contacto a eliminar
    String newName = data[0];

    String nameNumberString;
    String name;
    long number;
    int index;

    // Crear o abrir el archivo de contactos
    File file = new File("friendsContact.txt");

    if (!file.exists()) {
        // Si el archivo no existe, crearlo
        file.createNewFile();
    }

    // Abrir el archivo en modo lectura/escritura
    RandomAccessFile raf = new RandomAccessFile(file, "rw");
    boolean found = false;

    // Verificar si el contacto existe en el archivo
    while (raf.getFilePointer() < raf.length()) {
        // Leer línea por línea del archivo
        nameNumberString = raf.readLine();

        // Dividir la línea para obtener nombre y número
        String[] lineSplit = nameNumberString.split("!");

        // Separar el nombre y número
        name = lineSplit[0];
        number = Long.parseLong(lineSplit[1]);

        // Comparar el nombre usando equals() en vez de ==
        if (name.equals(newName)) {
            found = true;
            break;
        }
    }

    // Eliminar el contacto si existe
    if (found) {
        // Crear un archivo temporal
        File tmpFile = new File("temp.txt");

        // Abrir el archivo temporal en modo lectura/escritura
        RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

        // Volver al inicio del archivo original
        raf.seek(0);

        // Recorrer el archivo original para copiar los contactos al archivo temporal
        while (raf.getFilePointer() < raf.length()) {
            nameNumberString = raf.readLine();
            index = nameNumberString.indexOf('!');
            name = nameNumberString.substring(0, index);

            // Si el contacto es el que queremos eliminar, no lo copiamos
            if (name.equals(newName)) {
                continue;
            }

            // Copiar el contacto al archivo temporal
            tmpraf.writeBytes(nameNumberString);
            tmpraf.writeBytes(System.lineSeparator());
        }

        // Copiar el contenido del archivo temporal al archivo original
        raf.seek(0);
        tmpraf.seek(0);

        while (tmpraf.getFilePointer() < tmpraf.length()) {
            String line = tmpraf.readLine();
            raf.writeBytes(line);
            raf.writeBytes(System.lineSeparator());
        }

        // Ajustar la longitud del archivo original para que coincida con el archivo temporal
        raf.setLength(tmpraf.length());

        // Cerrar los recursos
        tmpraf.close();
        raf.close();

        // Eliminar el archivo temporal
        tmpFile.delete();

        System.out.println("Amigo eliminado.");
    } else {
        // Cerrar los recursos si no se encontró el contacto
        raf.close();
        System.out.println("El nombre no existe.");
    }

} catch (IOException ioe) {
    System.out.println("Error de IO: " + ioe.getMessage());
}

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        nombre.setText("");
        numero.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField numero;
    // End of variables declaration//GEN-END:variables
}
